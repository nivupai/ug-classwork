# Outline the system structure (including necessary files and directories for running the code)

# System Structure
src/: directory containing source code files and data files

Code/: directory containing source code files
* letterLangId.ipynb: implementation of letter bigram language model
* wordLangId.ipynb: implementation of word bigram language model
* wordLangId2.ipynb: implementation of word bigram language model with Good-Turing 

Data/: directory containing input and output data files

Input/: directory containing training data files for different languages
* LangId.train.English: training data file for English language
* LangId.train.French: training data file for French language
* LangId.train.Italian: training data file for Italian language

Output/: directory to store output files generated by the program
* letterLangId.out: output file for letter bigram language model
* * wordLangId.out: output file for word bigram language model
wordLangId2.out: output file for word bigram language model with Good-Turing smoothing

Validation/: directory containing validation data files
* LangId.test: test file for language identification
* labels.sol: solution file with correct language labels

answer.pdf: contains answers to questions from assignment doc
README.md: contains instructions on running the code and information on this assignemnt's implementation

# System Description
The system designed for the N-Gram Language Models Applied to the Task of Language Identification assignment comprises three main components: `letterLangId.ipynb`, `wordLangId.ipynb`, and `wordLangId2.ipynb`. These Jupyter Notebook files implement various language models using n-grams and smoothing techniques to identify the language of input text. The `letterLangId.ipynb` program focuses on a letter bigram model, learning probabilities from training data and applying them to determine the most likely language for each sentence in the test file. Similarly, `wordLangId.ipynb` implements a word bigram model with add-one smoothing, while `wordLangId2.ipynb` extends this by using Good-Turing smoothing for more accurate language identification.

Each program follows a structured approach, including data preprocessing steps to clean and prepare the input text, defining tokens based on the task's requirements, handling out-of-vocabulary words, and applying appropriate smoothing techniques to handle unseen data. The system's directory structure ensures organization and ease of access, with separate directories for input data, validation files, output results, and code implementation. Additionally, the README.md file provides detailed instructions on how to run each program and interpret the output files, enhancing usability and clarity for users interacting with the system.